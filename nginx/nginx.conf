# Configuration for non-root nginx
worker_processes auto;
pid /tmp/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Logging Settings
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;

    # Basic Settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;  # Hide nginx version

    # Gzip Settings
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Include global configurations
    include /etc/nginx/conf.d/*.conf;

    server {
        listen 8080;
        server_name _;
        root /usr/share/nginx/html;
        index index.html;

        # Include server-specific configurations
        include /etc/nginx/includes.d/*.conf;
        
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;

        # Normalize multiple slashes to single slash
        if ($request_uri ~ "^[^?]*?//") {
            rewrite ^(.*)$ $scheme://$host$1 permanent;
        }

        # Remove trailing slash (except for root)
        if ($request_uri ~ "^(.+)/$") {
            return 301 $scheme://$host$1;
        }

        # Redirect /index.html to /
        location = /index.html {
            return 301 /;
        }

        # Redirect any /path/index to /path
        location ~ ^(.+)/index$ {
            return 301 $1;
        }

        # Redirect any /path/index.html to /path
        location ~ ^(.+)/index\.html$ {
            return 301 $1;
        }

        # Redirect /index to / 
        if ($request_uri ~* "^/index$") {
            return 301 $scheme://$host/;
        }

        # Redirect .html URLs to clean URLs (avoid duplicate content)
        location ~ ^/(.+)\.html$ {
            return 302 $scheme://$host/$1;
        }

        # VitePress clean URLs configuration
        # First try to find the exact URI
        # Then try to serve it with .html extension (internally)
        # Then try URI as a directory with index.html
        # Finally, fall back to 404
        location / {
            try_files $uri $uri.html $uri/index.html =404;
        }

        # Cache static assets
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            access_log off;
        }

        # Cache HTML files for shorter time
        location ~* \.html$ {
            expires 1h;
            add_header Cache-Control "public, must-revalidate";
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "OK";
            add_header Content-Type text/plain;
        }

        # Deny access to hidden files
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }
    }
}
