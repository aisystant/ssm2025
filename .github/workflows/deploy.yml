name: Deploy to Nomad

on:
  # Automatic deployment after successful build on main
  workflow_run:
    workflows: ["Build and Publish Docker Image"]
    branches: [main]
    types: [completed]
  
  # Manual deployment with custom image tag
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Docker image tag to deploy'
        required: true
        default: 'main'
        type: string
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  # Environment-specific configuration
  NOMAD_HOST: ${{ vars.NOMAD_HOST }}
  NOMAD_USER: ${{ vars.NOMAD_USER }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || 'production' }}
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Start deployment timer
      run: |
        echo "DEPLOY_START_TIME=$(date +%s)" >> $GITHUB_ENV

    - name: Determine image tag
      id: image
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          IMAGE_TAG="${{ inputs.image_tag }}"
        else
          # For automatic deployment, use main tag
          IMAGE_TAG="main"
        fi
        
        FULL_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}"
        echo "tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
        echo "full_image=${FULL_IMAGE}" >> $GITHUB_OUTPUT
        echo "Using image: ${FULL_IMAGE}"

    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.NOMAD_SSH_PRIVATE_KEY }}" > ~/.ssh/nomad_key
        chmod 600 ~/.ssh/nomad_key
        ssh-keyscan -H ${{ env.NOMAD_HOST }} >> ~/.ssh/known_hosts

    - name: Update Nomad job file with image
      run: |
        echo "Updating job file with image: ${{ steps.image.outputs.full_image }}"
        
        # Update the job file
        sed -i "s|image = \".*\"|image = \"${{ steps.image.outputs.full_image }}\"|g" nomad-job.hcl
        
        # Show the updated job file for verification
        echo "Updated job file:"
        grep -A 2 -B 2 "image = " nomad-job.hcl

    - name: Validate Nomad job
      timeout-minutes: 1
      run: |
        # Copy job file to Nomad server for validation
        scp -i ~/.ssh/nomad_key -o StrictHostKeyChecking=no nomad-job.hcl ${{ env.NOMAD_USER }}@${{ env.NOMAD_HOST }}:/tmp/ssm2025-job.hcl
        
        # Validate the job
        ssh -i ~/.ssh/nomad_key -o StrictHostKeyChecking=no ${{ env.NOMAD_USER }}@${{ env.NOMAD_HOST }} "nomad job validate /tmp/ssm2025-job.hcl"

    - name: Pre-flight image check
      timeout-minutes: 1
      run: |
        echo "Verifying Docker image accessibility from Nomad cluster..."
        
        # Test if the image can be pulled on the Nomad cluster (30 second timeout for tiny image)
        IMAGE_CHECK=$(ssh -i ~/.ssh/nomad_key -o StrictHostKeyChecking=no ${{ env.NOMAD_USER }}@${{ env.NOMAD_HOST }} "timeout 30s docker pull ${{ steps.image.outputs.full_image }} && echo 'SUCCESS' || echo 'FAILED'")
        
        if echo "$IMAGE_CHECK" | grep -q "SUCCESS"; then
          echo "‚úÖ Image is accessible from Nomad cluster"
          # Clean up the test image to save space
          ssh -i ~/.ssh/nomad_key -o StrictHostKeyChecking=no ${{ env.NOMAD_USER }}@${{ env.NOMAD_HOST }} "docker rmi ${{ steps.image.outputs.full_image }} || true" &
        else
          echo "‚ùå Image cannot be pulled from Nomad cluster"
          echo "This will cause deployment to fail or timeout"
          echo "Check:"
          echo "1. Image exists: ${{ steps.image.outputs.full_image }}"
          echo "2. Image is public"
          echo "3. Network connectivity from Nomad cluster"
          exit 1
        fi

    - name: Plan deployment
      run: |
        echo "Planning deployment..."
        # Nomad job plan returns different exit codes:
        # 0: No changes needed
        # 1: Changes planned
        # 255: Error occurred
        set +e
        PLAN_OUTPUT=$(ssh -i ~/.ssh/nomad_key -o StrictHostKeyChecking=no ${{ env.NOMAD_USER }}@${{ env.NOMAD_HOST }} "nomad job plan /tmp/ssm2025-job.hcl" 2>&1)
        PLAN_EXIT_CODE=$?
        set -e
        
        echo "$PLAN_OUTPUT"
        
        if [ $PLAN_EXIT_CODE -eq 255 ]; then
          echo "‚ùå Planning failed with error"
          exit 1
        elif [ $PLAN_EXIT_CODE -eq 1 ]; then
          echo "‚úÖ Changes detected and planned successfully"
        elif [ $PLAN_EXIT_CODE -eq 0 ]; then
          echo "‚ÑπÔ∏è No job changes detected, but forcing deployment to ensure latest image"
          echo "This ensures the latest Docker image content is deployed even with same tag"
        else
          echo "‚ö†Ô∏è Unexpected exit code: $PLAN_EXIT_CODE"
        fi

    - name: Deploy to Nomad
      timeout-minutes: 3
      run: |
        echo "Deploying to Nomad with timeout protection..."
        
        # Use -force-deploy to ensure deployment even when Nomad sees no changes
        # This is crucial when Docker image content changes but tag stays the same
        if timeout 90s ssh -i ~/.ssh/nomad_key -o StrictHostKeyChecking=no ${{ env.NOMAD_USER }}@${{ env.NOMAD_HOST }} "nomad job run -force-deploy /tmp/ssm2025-job.hcl"; then
          echo "‚úÖ Deployment command completed successfully"
        else
          echo "‚ùå Deployment command failed or timed out after 90 seconds"
          echo "This could indicate:"
          echo "- Image pull timeout"
          echo "- Network connectivity issues"
          echo "- Resource allocation problems"
          exit 1
        fi

    - name: Wait for deployment
      timeout-minutes: 2
      run: |
        echo "Waiting for deployment to stabilize..."
        
        # Monitor deployment progress with timeout (shorter checks for fast static site)
        for i in {1..8}; do
          echo "Check $i/8: Monitoring deployment progress..."
          
          # Get job status
          JOB_STATUS=$(ssh -i ~/.ssh/nomad_key -o StrictHostKeyChecking=no ${{ env.NOMAD_USER }}@${{ env.NOMAD_HOST }} "nomad job status -short ssm2025" || echo "failed")
          
          if echo "$JOB_STATUS" | grep -q "running"; then
            echo "‚úÖ Deployment is running successfully"
            break
          elif echo "$JOB_STATUS" | grep -q "failed\|dead"; then
            echo "‚ùå Deployment failed"
            echo "Getting detailed status..."
            ssh -i ~/.ssh/nomad_key -o StrictHostKeyChecking=no ${{ env.NOMAD_USER }}@${{ env.NOMAD_HOST }} "nomad job status ssm2025" || true
            exit 1
          else
            echo "‚è≥ Deployment still in progress... (status: pending/starting)"
            sleep 10
          fi
        done

    - name: Check deployment status
      timeout-minutes: 1
      run: |
        echo "Checking final deployment status..."
        
        # Get detailed job status
        if ssh -i ~/.ssh/nomad_key -o StrictHostKeyChecking=no ${{ env.NOMAD_USER }}@${{ env.NOMAD_HOST }} "nomad job status ssm2025"; then
          echo ""
          echo "Getting allocation details..."
          ssh -i ~/.ssh/nomad_key -o StrictHostKeyChecking=no ${{ env.NOMAD_USER }}@${{ env.NOMAD_HOST }} "nomad job allocs ssm2025" || true
        else
          echo "‚ùå Failed to get job status"
          exit 1
        fi

    - name: Verify service health
      timeout-minutes: 1
      run: |
        echo "Checking service registration..."
        ssh -i ~/.ssh/nomad_key -o StrictHostKeyChecking=no ${{ env.NOMAD_USER }}@${{ env.NOMAD_HOST }} "nomad service list" || echo "Service discovery not available"

    - name: Cleanup SSH key
      if: always()
      run: |
        rm -f ~/.ssh/nomad_key

    - name: Deployment summary
      run: |
        echo "‚úÖ Deployment process completed!"
        echo "üì¶ Image: ${{ steps.image.outputs.full_image }}"
        echo "üéØ Environment: ${{ inputs.environment || 'production' }}"
        echo "üîó Tag: ${{ steps.image.outputs.tag }}"
        echo ""
        echo "Note: Deployment was forced to ensure latest image content is deployed,"
        echo "      even if Nomad detected no job specification changes."
